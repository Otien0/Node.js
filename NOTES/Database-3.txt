mongoose:
1. Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.

          Link to Documentation:
                                https://mongoosejs.com/docs/
                                https://www.npmjs.com/package/mongoose
                                https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/
                                https://dev.to/christinegaraudy/mongodb-with-mongoose-for-beginners-34oc
                                https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose
                                https://www.freecodecamp.org/news/mongodb-mongoose-node-tutorial/
                                
                                
inside backend Database_dir/ OR Your workspace directory, Run : npm install mongoose --save

Demo on Mongoose/Connecting to DB:
      Inside Database Dir, run; touch cats.js, 
      Install mongoose & don't save it by running; npm install mongoose 
      Connect with mongoose using the online docs, through Schema formart, then run node cat.js to start the app
      Check if the cat is added to mongo shell db by running: show dbs on mongo shell, then use it to show the collections.

      Some Changes in the Mongoose Documentation & Other Links:    
                          https://mongoosejs.com/docs/deprecations.html
                          https://www.jenniferbland.com/saving-data-to-mongodb-database-from-node-js-application-tutorial/
                          https://www.freecodecamp.org/forum/t/creating-and-saving-a-record-with-mongodb/255208/2
                          https://mongodb.github.io/node-mongodb-native/api-generated/collection.html
NOTE:
######## connecting to mongoose, use:  
mongoose.connect("mongodb://localhost/(DB_NAME)", { useNewUrlParser: true, useUnifiedTopology: true}); #######

                     ALSO:
if error, go to : sudo nano /etc/mongod.conf // and change security to disabled then back to mongo shell..

        YELPCAMP VERSION 2:
2. YelpCamp Data Persistence/Adding Mongoose
   #Style the campgrounds page
   a) Add a better header/title
   b) Make campgrounds display in a grid
   
   #style the Navbar and Form
   a) Add a navbar to all templates
   b) Style the new campground form
   
   #Add Mongoose
   a) Install and configure mongoose
   b) Set up campground model 
   c) Use campground model inside the routes
   
3. Yelpcamp campground show page prt 1:
   #Show page
   a)Review the RESTful routes and understand the order of restful routes.
   b)add descriptiom to the campground under Show route
   c)Show db.collection.drop() // deletes all the campgrounds collection in our DB
   d)Add a show route/template.

Debugging MONGODB SERVER:
                         ~$ sudo service mongodb stop

                         ~$ sudo rm /var/lib/mongodb/mongod.lock

                         ~$ sudo mongod --repair --dbpath /var/lib/mongodb

                         ~$ sudo mongod --fork --logpath /var/lib/mongodb/mongodb.log --dbpath /var/lib/mongodb

                         ~$ sudo service mongodb startround model

        RESTFUL API:
4. REST(Representational state transfer) -- Representational state transfer is a software architectural style that defines a set
   of constraints to be used for creating Web services. Web services that conform to the REST architectural style, called RESTful
   Web services, provide interoperability between computer systems on the internet.
   
   ==>> 7 RESTFUL ROUTES: INDEX, NEW, CREATE, SHOW, EDIT, UPDATE, DESTROY
   
   Documentation Links:
                       https://restfulapi.net/
                       https://www.codecademy.com/articles/what-is-rest
                       https://nordicapis.com/building-a-restful-api-using-node-js-and-mongodb/
                       https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/
                       https://rapidapi.com/blog/how-to-create-an-api-with-mongodb/
                 https://1337x.to/torrent/4285318/FreeCourseWeb-Udemy-Node-js-REST-API-with-Express-MongoDB-Solid-Architecture/     
                 https://www.mongodb.com/blog/post/building-your-first-application-mongodb-creating-rest-api-using-mean-stack-part-1
                 https://livebook.manning.com/book/getting-mean-with-mongo-express-angular-and-node-second-edition/chapter-6/22
                 
                 
5.     REST: BLOG APP;
            Links to further: https://itnext.io/blog-app-using-mern-stack-b0b4d69d7ea1
                              https://github.com/obwansan/RESTful-Blog-App            
  #Blog Index:
               Setup the Blog App,
               Create the Blog Model,
               Add index route and template,
                     
  #Basic Layout:
                Add header and footer partials
                Include Semantic UI
                        Link:  https://semantic-ui.com/
                               https://cdnjs.com/libraries/semantic-ui   //search for semantic.css on the search bar
                                                                        //copy the semantic.min.css
                 
                Add a simple Navbar: =>>On semantic UI, Click on menu, go to Collections/menu,
                 to view the types of navbars available.
  
  #Putting C in CRUD:
                     Add a new route.
                     Add a new teemplate.
                     Add CREATE route.
                     Add CREATE template.
                     
  #Show Route:
              Adding a show route.
              Adding a show template.
              Add links to show page.
              Style show template.  ==>> https://semantic-ui.com/views/item.html
                // use .toDateString() to style your "created-date" or moment.js library.
                // replace the "=" with "-" in blog.body under shwo template, to write the contents 
                    using html styles when posting new blog item.
                //Use .substring(0, any number) to limit characters being displayed on the blog index page.
                
 #Edit/Update Routes:
                     Add Edit Route.
                     Add Edit Form.
                     Add Update Route.
                     Add Update Form.
                     Add Method-Override. // npm install method-override --save
                                Link:    https://www.npmjs.com/package/method-override
                                         https://levelup.gitconnected.com/using-the-method-override-express-middleware-3853a115a5ca
                             Deprecation Link: https://mongoosejs.com/docs/deprecations.html#findandmodify
                             
 #DESTROY ROUTE:
                Add Destroy Route.
                Add Edit And Destroy Links/Buttons.
                
 #Final Updates:
                Sanitize Blog Body. ==>>: https://www.npmjs.com/package/express-sanitizer
                Style index Route.
                      
6. Data Associations:
                     https://docs.mongodb.com/manual/applications/data-models-relationships/
                     https://www.studytonight.com/mongodb/relationships-in-mongodb
                     one:one
                     one:many
                     many:many
      a)Embedding Data:
                      https://docs.mongodb.com/manual/core/data-modeling-introduction/
                      https://docs.mongodb.com/manual/core/data-model-design/
                      https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/
                      
      b) Referencing Data:
                         https://docs.mongodb.com/manual/reference/database-references/
                         https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/
                         https://dev.to/oluseyeo/how-to-create-relationships-with-mongoose-and-node-js-11c8
                         
      c) Module.Exports:
         Involves moving models into separate files;
                    https://stackoverflow.com/questions/5311334/what-is-the-purpose-of-node-js-module-exports-and-how-do-you-use-it
                    https://nodejs.org/api/modules.html
                    https://www.tutorialsteacher.com/nodejs/nodejs-module-exports
                        
                         
                      
