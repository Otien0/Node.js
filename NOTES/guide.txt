node --- to check the version.

mkdir to create a new dir of your app, cd then ;

run npm init  // to create a package.json file

While at the the npm init call, while editing the package.json file, use "description" of your own,
 and use "app.js" to be entry point instead of "index.js", and
change author name to be yours.

Inside same dir, install both expressjs and ejs by:
                              npm install express --save
                              npm install ejs

Create the app file by : touch app.js

run the node server by node f_name(.js) =>>  i.e: node app.js

 steps/basic app examples;
1.echo.js
2.grader.js
3.Demo-App
4.Myshop

5.SERVER side FrameWORKS: express/npm/routes
  Express-js - Express.js, or simply Express, is a back end web application framework for Node.js, released as free and
   open-source software under the MIT License. It is designed for building web applications and APIs.
    It has been called the de facto standard server framework for Node.js.
     Link to Documentation:  https://expressjs.com/
      Basics => First Express App
      
6.The package.json/package.json Demo
  npm init to create a package.json file
  inside the App folder, run > npm install express/any other package --save .. this will be stored under dependencies
  
7.Route Params/ Routing order

8.Express App Exercise => Testing Routing Basics together with loops.

9. Intermediate Expressjs => :Templates(.ejs_files)> mkdir EJSDemo/npm init/touch app.js/npm install express --save
   EJS(Embedded JavaScript)<%= %> /render
      Link to Documentation: https://ejs.co/
      Under same/main directory, install ejs by: npm install ejs  "to be saved under package.json file"
   Under same EJSDemo-directory, we make a separate directory called views to hold the html templates(.ejs_files).
   NOTE: INCLUDE => app.set("view engine", "ejs"); __under app.js   // this is in order for the views-template files to be rendered.
   
10.EJS Conditionals and loops > difference betwwen <%=  %> & <%  %> is that:
       When using the tags in html, we use the one with equal sign; <%=  %>, while;
       when using the loops/conditional statements, we use <% %>.
       
11. Serving Custom Assetss> adding css styles > using view engine on all .ejs files
          Under same EJSDemo-directory, we make a separate directory called public to hold the css-templates(.css_files).
    NOTE: INCLUDE => app.use(express.static("public")); __under app.js   // this is in order for the css files to be rendered.
    
          PARTIALS:
    INSIDE Views directory, make another dir called partials, which contains html headers and footers.
         THEN ADD:
         <%- include('partials/header') -%>  to the top of each .ejs file
         <%- include('partials/footer') -%>  to the bottom of each .ejs file

    EXPRESS ROUTING:
                    Routing refers to how an applicationâ€™s endpoints (URIs) respond to client requests.
    Link to Documentation: https://expressjs.com/en/guide/routing.html
                           https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routes
12.Post Requests, (Run npm install -g npm  // to install npm globally on your machine)
    post route is for sending or adding new data to the database to be used later.
    adding a form to the route:
          Link to documentation; https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/forms
                                 https://flaviocopes.com/express-forms/
                                 
    // check on this also: https://medium.com/khojchakra/a-simple-nodejs-server-without-express-js-6773122d365f
    
          BODY-PARSER:
     Link to Documentation: http://expressjs.com/en/resources/middleware/body-parser.html
    npm install body-parser --save
    res.redirect(takes the name of the route and redirects you to that route)
    
       YELP CAMP:
13. YelpCampBasics Initial Routes: Add a Landing page, mkdir views/touch landing.ejs... add campground page 
    that lists all campgrounds with name & image. It should be an array with objects inside.
    
    a)Yelpcamp Layout: add layout and basic stylling, create header & footer partials, add in Bootstrap cdn
                      Link: https://getbootstrap.com/docs/3.3/getting-started/
                      
    b) creating New Campgrounds: setup new campground POST route, Add in body-parser, setup route to show form, Add basic 
    unstylled form.
    
    c)Styling Campgrounds: add a better header/title, make campgrounds display in a grid
        Under this we need to learn more about Bootsrap grid.
        Link to futher bootstrap grid documentation:
                                                  https://mdbootstrap.com/docs/standard/layout/grid/
                                                  https://getbootstrap.com/docs/4.0/examples/grid/
                                                  https://www.w3schools.com/bootstrap/bootstrap_templates.asp
                                                  
    d)Style the navbar and form: add a navbar to all templates, style the new campground forms
           Nav && Navbar links:
                               https://getbootstrap.com/docs/5.0/components/navs-tabs/ 
                               https://getbootstrap.com/docs/5.0/components/navbar/
    
    



